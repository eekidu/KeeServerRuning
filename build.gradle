/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

import okhttp3.*
import groovy.json.JsonSlurper
import okio.BufferedSink

import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        maven() { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        //https://github.com/square/okhttp
        classpath "com.squareup.okhttp3:okhttp:3.10.0"
    }
}

task TestMain(group: "upload") {
    doLast {
//        def client = initClient()
//        def build = new Request.Builder().url("http://www.baidu.com").get().build()
//        def string = client.newCall(build).execute().body().string()
//        print(string)

//        updateVersion("group", "apd", "10.32")
        print("读取环境变量：${System.getenv("GROUPID")}")
        print("读取ACCESS_TOKEN：${System.getenv("ACCESS_TOKEN")}")
    }
}


def initClient() {
    def okClient = new OkHttpClient.Builder().connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(10, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .addNetworkInterceptor(new Interceptor() {
        @Override
        Response intercept(Interceptor.Chain chain) throws IOException {
//            Request newReq = chain.request().newBuilder()
//                    .addHeader("PRIVATE-TOKEN", gl_token).build();
            Request newReq = chain.request()
            return chain.proceed(newReq)
        }
    }).build()
    return okClient
}


def updateVersion(GROUP, POM_ARTIFACT_ID, BUILD_VER_NAME) {

    def owner = "eekidu"
    def repo = "KeeServerRuning"
    def workflowId = "2"

    def GITHUB_TOKEN=System.getenv("TOKEN")

    RequestBody requestBody = new FormBody.Builder()
            .add("name", "haikuan")
            .add("home", "北京").build()

    Request request = new Request.Builder()
            .header("Accept", "application/vnd.github.v3+json")
            .header("Authorization", "token "+GITHUB_TOKEN)
            .url("https://api.github.com/repos/${}/${repo}/actions/workflows/${workflowId}/dispatches")
            .post(requestBody).build()
    def client = initClient()
    def reponse = client.newCall(request).execute()
    print(reponse.code())
    print(reponse.body().string())

}


//    curl \
//  -H "Accept: application/vnd.github.v3+json" \
//  https://api.github.com/repos/eekidu/KeeServerRuning

def getee(){
    def url ="https://api.github.com/repos/eekidu/KeeServerRuning/actions/runs"


}